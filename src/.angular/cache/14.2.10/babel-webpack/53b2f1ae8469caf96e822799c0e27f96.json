{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/1968678/Desktop/TP2-H23-4204W6-SuperMusique-Hugo-Otth/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { HttpHeaders, HttpParams } from '@angular/common/http';\nimport { lastValueFrom } from 'rxjs';\nimport { Artist } from '../models/artist';\nimport { Album } from '../models/album';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nconst CLIENT_ID = \"1e546b84d9ee4604acb1b731e16eaa57\";\nconst CLIENT_SECRET = \"3cfb4207aa4546dda876c3cc0c234f57\";\nexport class SpotifyService {\n  constructor(http) {\n    this.http = http;\n    this.spotifyToken = null;\n    this.jsonData = null;\n    this.favoriteArtists = [];\n  }\n\n  connect() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      let body = new HttpParams().set('grant_type', 'client_credentials');\n      let httpOptions = {\n        headers: new HttpHeaders({\n          'Content-Type': 'application/x-www-form-urlencoded',\n          'Authorization': 'Basic ' + btoa(CLIENT_ID + ':' + CLIENT_SECRET)\n        })\n      };\n      let x = yield lastValueFrom(_this.http.post('https://accounts.spotify.com/api/token', body.toString(), httpOptions));\n      console.log(x);\n      _this.spotifyToken = x.access_token;\n    })();\n  }\n\n  searchArtist(artist) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      const httpOptions = {\n        headers: new HttpHeaders({\n          'Content-Type': 'application/json',\n          'Authorization': 'Bearer ' + _this2.spotifyToken\n        })\n      };\n      let x = yield lastValueFrom(_this2.http.get('https://api.spotify.com/v1/search?type=artist&offset=0&limit=1&q=' + artist, httpOptions));\n      console.log(x);\n      return new Artist(x.artists.items[0].id, x.artists.items[0].name, x.artists.items[0].images[0].url);\n    })();\n  }\n\n  addFavArtist(a) {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      let extists = false;\n\n      for (let i = 0; i < _this3.favoriteArtists.length; i++) {\n        if (_this3.favoriteArtists[i].id == a.id) {\n          extists = true;\n        }\n      }\n\n      if (!extists) {\n        _this3.favoriteArtists.push(a);\n\n        console.log(_this3.favoriteArtists.length);\n        localStorage.setItem(\"favoriteArtists\", JSON.stringify(_this3.favoriteArtists));\n      } else {\n        console.log(\"Artist \" + a.name + \" is already in favorites\");\n      }\n    })();\n  }\n\n  getFavorites() {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      _this4.jsonData = localStorage.getItem(\"favoriteArtists\");\n\n      if (_this4.jsonData != null) {\n        _this4.favoriteArtists = JSON.parse(_this4.jsonData);\n      }\n    })();\n  }\n\n  clearFavorites() {\n    var _this5 = this;\n\n    return _asyncToGenerator(function* () {\n      _this5.favoriteArtists = [];\n      localStorage.setItem(\"favoriteArtists\", JSON.stringify(_this5.favoriteArtists));\n    })();\n  }\n\n  getAlbums(artist) {\n    var _this6 = this;\n\n    return _asyncToGenerator(function* () {\n      const httpOptions = {\n        headers: new HttpHeaders({\n          'Content-Type': 'application/json',\n          'Authorization': 'Bearer ' + _this6.spotifyToken\n        })\n      };\n      let x = yield lastValueFrom(_this6.http.get(\"https://api.spotify.com/v1/artists/\" + artist.id + \"/albums?include_groups=album,single&limit=50\", httpOptions));\n      console.log(x);\n      let albums = [];\n\n      for (let i = 0; i < x.items.length; i++) {\n        albums.push(new Album(x.items[i].id, x.items[i].name, x.items[i].images[0].url, []));\n      }\n\n      return albums;\n    })();\n  }\n\n}\n\nSpotifyService.ɵfac = function SpotifyService_Factory(t) {\n  return new (t || SpotifyService)(i0.ɵɵinject(i1.HttpClient));\n};\n\nSpotifyService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: SpotifyService,\n  factory: SpotifyService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["HttpHeaders","HttpParams","lastValueFrom","Artist","Album","CLIENT_ID","CLIENT_SECRET","SpotifyService","constructor","http","connect","body","set","httpOptions","headers","btoa","x","post","toString","console","log","spotifyToken","access_token","searchArtist","artist","get","artists","items","id","name","images","url","addFavArtist","a","extists","i","favoriteArtists","length","push","localStorage","setItem","JSON","stringify","getFavorites","jsonData","getItem","parse","clearFavorites","getAlbums","albums","i0","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\1968678\\Desktop\\TP2-H23-4204W6-SuperMusique-Hugo-Otth\\src\\app\\services\\spotify.service.ts"],"sourcesContent":["import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { lastValueFrom } from 'rxjs';\r\nimport { Artist } from '../models/artist';\r\nimport { Album } from '../models/album';\r\n\r\nconst CLIENT_ID : string = \"1e546b84d9ee4604acb1b731e16eaa57\";\r\nconst CLIENT_SECRET : string = \"3cfb4207aa4546dda876c3cc0c234f57\";\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class SpotifyService {\r\n\r\n  spotifyToken : string | null = null;\r\n  jsonData : string | null = null;\r\n  favoriteArtists : Artist[] = [];\r\n\r\n  constructor(public http : HttpClient) { }\r\n\r\n  async connect(): Promise<void> {\r\n    let body = new HttpParams().set('grant_type', 'client_credentials');\r\n    let httpOptions = {\r\n      headers: new HttpHeaders({\r\n      'Content-Type': 'application/x-www-form-urlencoded',\r\n      'Authorization': 'Basic ' + btoa(CLIENT_ID + ':' + CLIENT_SECRET)\r\n      })\r\n    };\r\n    let x = await lastValueFrom(this.http.post<any>('https://accounts.spotify.com/api/token', body.toString(), httpOptions));\r\n    console.log(x);\r\n    this.spotifyToken = x.access_token;\r\n  }\r\n\r\n  async searchArtist(artist : string): Promise<Artist> {\r\n    const httpOptions = { headers: new HttpHeaders({\r\n      'Content-Type':  'application/json',\r\n      'Authorization': 'Bearer ' + this.spotifyToken\r\n    })};\r\n    \r\n    let x = await lastValueFrom(this.http.get<any>('https://api.spotify.com/v1/search?type=artist&offset=0&limit=1&q=' + artist, httpOptions));\r\n    console.log(x);\r\n    return new Artist(x.artists.items[0].id, x.artists.items[0].name, x.artists.items[0].images[0].url);\r\n  }\r\n\r\n  async addFavArtist(a : Artist) : Promise<void>{\r\n    let extists = false;\r\n    for(let i = 0 ; i < this.favoriteArtists.length; i++){\r\n      if(this.favoriteArtists[i].id == a.id){\r\n        extists = true;\r\n      }\r\n    }\r\n    if(!extists){\r\n      this.favoriteArtists.push(a);\r\n    console.log(this.favoriteArtists.length);\r\n    localStorage.setItem(\"favoriteArtists\", JSON.stringify(this.favoriteArtists));\r\n    }else{\r\n      console.log(\"Artist \" + a.name + \" is already in favorites\")\r\n    }\r\n  }\r\n\r\n  async getFavorites(): Promise<void>{\r\n    this.jsonData = localStorage.getItem(\"favoriteArtists\")\r\n    if(this.jsonData != null){\r\n      this.favoriteArtists = JSON.parse(this.jsonData);\r\n    }\r\n  }\r\n\r\n  async clearFavorites() : Promise<void>{\r\n    this.favoriteArtists = [];\r\n    localStorage.setItem(\"favoriteArtists\", JSON.stringify(this.favoriteArtists));\r\n  }\r\n\r\n  async getAlbums(artist : Artist): Promise<Album[]> {\r\n        const httpOptions = {\r\n          headers: new HttpHeaders({\r\n            'Content-Type': 'application/json',\r\n            'Authorization': 'Bearer ' + this.spotifyToken\r\n          })\r\n        };\r\n        \r\n        let x = await lastValueFrom(this.http.get<any>(\"https://api.spotify.com/v1/artists/\" + artist.id + \"/albums?include_groups=album,single&limit=50\", httpOptions));\r\n        console.log(x);\r\n        \r\n        let albums = [];\r\n        for(let i = 0; i < x.items.length; i++){\r\n          albums.push(new Album(x.items[i].id, x.items[i].name, x.items[i].images[0].url, []));\r\n        }\r\n        return albums;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}